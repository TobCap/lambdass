% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/double-tilda.r
\name{double-tilda}
\alias{double-tilda}
\alias{~}
\title{syntax sugar of making an anonymous function}
\usage{
"~"(e1, e2)
}
\arguments{
\item{e1,e2}{The original-tilda is both unary and binary function.
if \code{e2} is missing and \code{e1}'s first call object is \code{~},
then anonymous function is made.}
}
\description{
Tilda is a R's "Primitive Function" that does not evaluate its argument, and
it is normally used to create a formula object as an inner-DSL role.
I hijack this functionality to make an anounymous function.
Double-tilda with a two-dots symbol, \code{..}, makes an anonymous function
in which two-dots plays a placeholder. If you need two or more arguments,
the placeholde should be \code{..1}, \code{..2}, and so on. See examples.
Single tilda works as if it is normaly used but it takes a bit calulation
process, and not fully tested.
}
\details{
Unsupported nested lambda.
\code{function(x) function(y) x + y} cannot define by double-tilda.
Use \code{f.} and type this; \code{f.(x, f.(y, x + y))}
}
\examples{
\donttest{
~~ .. + 1 # => function(..) .. + 1
~~ ..1 + ..2 # => function(._1, ._2) ._1 + ._2

Reduce(~~ ..1 + ..2, 1:10)
Filter(~~ .. \%\% 3 == 0, 1:10)
}
# The tilda's role remains.
~ speed + dist
lm(speed ~ dist, data = cars)
lm(mpg ~ ., data = mtcars)
}

