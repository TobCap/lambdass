% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/double-tilde.r
\name{double-tilde}
\alias{double-tilde}
\alias{~}
\title{syntax sugar of making an anonymous function}
\usage{
"~"(e1, e2)
}
\arguments{
\item{e1, e2}{The original-tilde is both unary and binary function. 
if \code{e2} is missing and the first call object of \code{e1} is \code{~} 
symbol itself, then an anonymous function is made.}
}
\description{
Tilde is a R's "Primitive Function" that does not evaluate its argument, and
it is normally used to create a formula object as an inner-DSL role.
I hijack this functionality to make an anounymous function.
Double-tilde with a two-dots symbol, \code{..}, makes an anonymous function
in which two-dots plays a placeholder. If you need two or more arguments,
the placeholde should be \code{..1}, \code{..2}, and so on. See examples.
Single tilde works as if it is normaly used but it takes a bit calulation 
process, and not fully tested.
}
\details{
Unsupported nested lambda.
\code{function(x) function(y) x + y} cannot define by double-tilde.
Use \code{f.} and type this; \code{f.(x, f.(y, x + y))}
}
\examples{
~~ .. + 1 # => function(..) .. + 1
~~ ..1 + ..2 # => function(._1, ._2) ._1 + ._2

Reduce(~~ ..1 + ..2, 1:10)
Filter(~~ .. \%\% 3 == 0, 1:10)

# The tilde's role remains.
~ speed + dist
lm(speed ~ dist, data = cars)
lm(mpg ~ ., data = mtcars)
}
